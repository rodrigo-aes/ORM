import type { Entity } from "../General"
import type { Primitive } from "../General"

type PropertyMetadata = { __property?: true }
type AutoGeneratedPropertyMetadata = { __autoGenerated?: true }

export type Property<T> = T & PropertyMetadata
export type AutoGeneratedProperty<T> = (
    Property<T> & AutoGeneratedPropertyMetadata
)

// ----------------------------------------------------------------------------

export type EntityPropertiesKeys<T extends object> = {
    [K in keyof T]: (
        T[K] extends PropertyMetadata
        ? Extract<K, string>
        : never
    )
}[keyof T]

export type EntityProperties<T extends object> = Pick<
    T,
    EntityPropertiesKeys<T>
>

// ----------------------------------------------------------------------------

export type EntityRelationsKeys<T extends object> = {
    [K in keyof T]: (
        T[K] extends null
        ? never
        : T[K] extends Entity | null
        ? K
        : never
    )
}[keyof T]

export type EntityRelations<T extends object> = Pick<
    T,
    EntityRelationsKeys<T>
>

// ----------------------------------------------------------------------------

export type OptionalNullable<T> = (
    {
        [K in keyof T as (
            T[K] extends AutoGeneratedPropertyMetadata
            ? K
            : undefined extends T[K]
            ? K
            : null extends T[K]
            ? K
            : never

        )]?: T[K]
    } & {
        [K in keyof T as (
            T[K] extends AutoGeneratedPropertyMetadata
            ? never
            : undefined extends T[K] ? never
            : null extends T[K] ? never
            : K
        )]: T[K]
    }
)